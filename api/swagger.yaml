swagger: '2.0'
info:
  description: This is the API for the NLU module of the Smart Platform Group at Samtec.
  version: 1.0.0
  title: Natural Language Understanding
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: daniel.calvo@samtec.com
host: data.samtec.com
basePath: /nlu/v1
tags:
  - name: keyword
    description: >-
      The keyword endpoint is used to create, retrieve, update, and delete
      developer-defined keyword objects
  - name: saying
    description: >-
      The saying endpoint is used to create, retrieve, update, and delete saying
      objects.
  - name: domain
    description: >-
      The domain endpoint is used to create, retrieve, update, and delete domain
      objects.
schemes:
  - http
paths:
  /keyword:
    get:
      tags:
        - keyword
      summary: Retrieves a list of all entitites in the domain
      description: ''
      operationId: findKeywords
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Keyword'
        '404':
          description: Keywords not found
    post:
      tags:
        - keyword
      summary: Creates one or multiple keywords
      description: ''
      operationId: createKeyword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Array with the keywords objects that needs to be created
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Keyword'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Keyword'
        '400':
          description: Bad Request
    put:
      tags:
        - keyword
      summary: Updates or creates miltiple keywords
      description: ''
      operationId: upsertKeyword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            Array with the keyword or keywords that needs to be updated or
            created
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Keyword'
      responses:
        '200':
          description: successful operation
        '400':
          description: Bad Request
  '/entitiy/{id}':
    get:
      tags:
        - keyword
      summary: Find the specified keyword
      description: Returns a single keyword
      operationId: findById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the keyword to return
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Keyword'
        '404':
          description: Keyword not found
    put:
      tags:
        - keyword
      summary: Updates the specified keyword
      description: ''
      operationId: updateById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Keyword id to update
          required: true
          type: string
        - in: body
          name: body
          description: Keyword object with updated values
          required: true
          schema:
            $ref: '#/definitions/Keyword'
      responses:
        '200':
          description: successful operation
        '400':
          description: Bad Request
        '404':
          description: Keyword not found
    delete:
      tags:
        - keyword
      summary: Deletes the specified keyword
      description: ''
      operationId: deleteById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Keyword id to delete
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: Keyword not found
  /saying:
    get:
      tags:
        - saying
      summary: Retrieves a list of all sayings in the domain
      description: ''
      operationId: findSayings
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Saying'
        '404':
          description: Sayings not found
    post:
      tags:
        - saying
      summary: Creates one or multiple sayings
      description: ''
      operationId: createSaying
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Array with the sayings objects that needs to be created
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Saying'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Saying'
        '400':
          description: Bad Request
    put:
      tags:
        - saying
      summary: Updates or creates miltiple sayings
      description: ''
      operationId: upsertSaying
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Array with the saying or sayings that needs to be updated or created
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Saying'
      responses:
        '200':
          description: successful operation
        '400':
          description: Bad Request
  '/saying/{id}':
    get:
      tags:
        - saying
      summary: Find the specified saying
      description: Returns a single saying
      operationId: findSayingById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the saying to return
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Saying'
        '404':
          description: Saying not found
    put:
      tags:
        - saying
      summary: Updates the specified saying
      description: ''
      operationId: updateSayingById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Saying id to update
          required: true
          type: string
        - in: body
          name: body
          description: Saying object with updated values
          required: true
          schema:
            $ref: '#/definitions/Saying'
      responses:
        '200':
          description: successful operation
        '400':
          description: Bad Request
        '404':
          description: Saying not found
    delete:
      tags:
        - saying
      summary: Deletes the specified saying
      description: ''
      operationId: deleteSayingById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Saying id to delete
          required: true
          type: string
      responses:
        '404':
          description: Saying not found
  /domain:
    get:
      tags:
        - domain
      summary: Retrieves a list of all domains
      description: ''
      operationId: findDomains
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Domain'
        '404':
          description: Domains not found
    post:
      tags:
        - domain
      summary: Creates one or multiple domains
      description: ''
      operationId: createDomain
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Array with the domains objects that needs to be created
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Domain'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Domain'
        '400':
          description: Bad Request
    put:
      tags:
        - domain
      summary: Updates or creates miltiple domains
      description: ''
      operationId: upsertDomain
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Array with the domain or domains that needs to be updated or created
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Domain'
      responses:
        '200':
          description: successful operation
        '400':
          description: Bad Request
  '/domain/{id}':
    get:
      tags:
        - domain
      summary: Find the specified domain
      description: ''
      operationId: findDomainById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the domain to return
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Domain'
        '404':
          description: Domain not found
    put:
      tags:
        - domain
      summary: Updates the specified domain
      description: ''
      operationId: updateDomainById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Domain id to update
          required: true
          type: string
        - in: body
          name: body
          description: Domain object with updated values
          required: true
          schema:
            $ref: '#/definitions/Domain'
      responses:
        '200':
          description: successful operation
        '400':
          description: Bad Request
        '404':
          description: Domain not found
    delete:
      tags:
        - domain
      summary: Deletes the specified domain
      description: ''
      operationId: deleteDomainById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Domain id to delete
          required: true
          type: string
      responses:
        '404':
          description: Domain not found
  '/domain/{id}/saying':
    get:
      tags:
        - domain
      summary: Find sayings for the specified domain
      description: ''
      operationId: findSayingsByid
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the domain to return the sayings
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Saying'
        '404':
          description: Domain not found
    post:
      tags:
        - domain
      summary: Add an array of sayings to the specified domain
      description: ''
      operationId: addSayingsByid
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the domain where the sayings will be added
          required: true
          type: string
        - in: body
          name: body
          description: Array of Sayings objects with updated values
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Saying'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Domain'
        '400':
          description: Bad Request
        '404':
          description: Domain not found
    delete:
      tags:
        - domain
      summary: Deletes the sayings for the specified domain
      description: ''
      operationId: deleteSayingsByid
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Domain id to where the sayings area going to be delete
          required: true
          type: string
      responses:
        '404':
          description: Domain not found
  /doc:
    get:
      tags:
        - doc
      summary: Retrieves a list of all documents
      description: ''
      operationId: getDocuments
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentResponse'
        '404':
          description: Documents not found
  '/doc/{id}':
    get:
      tags:
        - doc
      summary: Find the specified document
      description: ''
      operationId: findDocById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the document to return
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/DocumentResponse'
        '404':
          description: Document not found
    delete:
      tags:
        - doc
      summary: Deletes the specified document
      description: ''
      operationId: deleteDocumentById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Doc id to delete
          required: true
          type: string
      responses:
        '404':
          description: Domain not found
  /parse:
    get:
      tags:
        - parse
      summary: Parse a text
      description: ''
      operationId: parseDocument
      parameters:
        - name: text
          in: query
          description: Text that is going to be parsed
          required: true
          type: string
        - name: domain
          in: query
          description: Optional domain to restrict parsing to just this domain
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/DocumentResponse'
        '404':
          description: Domain not found
definitions:
  Domain:
    type: object
    properties:
      id:
        type: string
        example: 94de64ab-3123-45ac-9364-5b9325931b9a
      name:
        type: string
        example: restaurant
      keywords:
        type: array
        items:
          $ref: '#/definitions/Keyword'
      sayings:
        type: array
        items:
          $ref: '#/definitions/Saying'
      lastTraining:
        type: string
        format: date-time
  Entry:
    type: object
    required:
      - value
      - synonyms
    properties:
      id:
        type: string
        example: baeda84e-5925-43c3-92ca-6e9928229783
      value:
        type: string
        example: indian
      synonyms:
        type: array
        items:
          type: string
        example: '[''indian'',''indi'']'
  Keyword:
    type: object
    required:
      - name
      - entries
    properties:
      id:
        type: string
        example: ab0e5373-78e7-4745-a058-6813d81eea60
      name:
        type: string
        example: cuisine
      entries:
        type: array
        items:
          $ref: '#/definitions/Entry'
        example: >-
          [{'value': 'indian', 'synonyms': ['indian', 'indi']},{'value':
          'italian', 'synonyms': ['italian']}]
  Saying:
    type: object
    properties:
      id:
        type: string
        example: 377efb40-9680-49ab-b119-e0345a48639c
      saying:
        type: string
        example: restaurant_search
      text:
        type: string
        example: I'm looking for indian cuisine
      keywords:
        type: array
        items:
          type: object
          properties:
            start:
              type: integer
              format: int32
              example: 16
            end:
              type: integer
              format: int32
              example: 22
            keyword:
              type: string
              example: ab0e5373-78e7-4745-a058-6813d81eea60
  Document:
    type: object
    properties:
      document:
        type: string
        example: I want to order some Chinese food.
      domain:
        type: string
        example: restaurant
  DocumentResponse:
    type: object
    properties:
      document:
        type: string
        example: I want to order some Chinese food.
      id:
        type: string
        example: asdfas345234sadfaewr2
      results:
        type: array
        items:
          type: object
          properties:
            domain:
              type: string
              example: restaurant
            saying:
              type: string
              example: restaurant_search
            confidence:
              type: number
              format: float
              example: 0.9127775465094253
            keywords:
              type: array
              items:
                type: object
                properties:
                  start:
                    type: integer
                    format: int32
                    example: 21
                  end:
                    type: integer
                    format: int32
                    example: 28
                  keywordValue:
                    type: string
                    example: chinese
                  keywordName:
                    type: string
                    example: cuisine
        example:
          - domain: food
            saying: restaurant_search
            confidence: 0.9127775465094253
            keywords:
              - start: 8
                end: 15
                keywordValue: chinese
                keywordName: cuisine
          - domain: geo
            saying: country_search
            confidence: 0.1127775465094253
            keywords:
              - start: 8
                end: 15
                keywordValue: China
                keywordName: country
